networks:
  frontend:
    name: reverse-proxy
    external: true
  backend:
    external: false

services:
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    restart: no
    environment:
      - KC_HOSTNAME=${DOMAIN}
      - KC_HEALTH_ENABLED=${KC_HEALTH_ENABLED}
      - KC_METRICS_ENABLED=${KC_METRICS_ENABLED}
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
      - KC_DB=postgres
      - KC_DB_URL= jdbc:postgresql://${DB_HOST}:${DB_PORT}/keycloak
      - KC_DB_USERNAME="${DB_USER}"
      - KC_DB_PASSWORD="${DB_PASSWORD}"
    command: start-dev
    expose:
      - 8080
    depends_on:
      - postgres
    # add the labels to the service configuration
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      # http
      - "traefik.http.routers.keycloak.rule=Host(`keycloak.localhost`)"
      - "traefik.http.routers.keycloak.entrypoints=web"
    # add the network to the service configuration
    networks:
     - frontend
     - backend
  
  postgres:
    image: postgres:latest
    restart: no
    environment:
      - POSTGRES_DB="${DB_NAME}"
      - POSTGRES_USER="${DB_USER}"
      - POSTGRES_PASSWORD="${DB_PASSWORD}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - backend
  
  mailhog:
    image: mailhog/mailhog:latest
    restart: no
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=reverse-proxy"
      - "traefik.http.routers.keycloak-mailhog.rule=Host(`mailhog.${DOMAIN}`)"
      - "traefik.http.routers.keycloak-mailhog.entrypoints=web"
      - "traefik.http.services.keycloak-mailhog.loadbalancer.server.port=8025"
    # expose:
    #   - 1025
    #   - 8025
    networks:
      - frontend
      - backend

volumes:
  postgres_data: